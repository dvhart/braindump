This is HORRIBLY incomplete.  The list is immense as the project isn't
even completely functional yet.  Right now I just start the app, pick some
unimplemented bit, and hack away...  I'll update this file to remind me
of things I can't just as easily do via inline '# FIXME's

o look at adding braindump to http://pypi.python.org/pypi ?? timrc's suggestion
o decide on consistent coding style
  o widget naming: update, update_btn, etc.
o task complete doesn't get immediately updated for the same task
  listed in other categories (but the title does, oddly enough)
o connect task_project combo box to TaskListView
o Add tree sorter functions
o have the filter row animate (swell, glow, whatever) when something is added/removed
o need some logging levels / infrastructure
o currently using pynotify - perhaps we should be using the signals from gobject?
o consider using a treeview for tasks, and break them up into "Today" "Tomorrow"|"This Week" "Later/No Date"
o Use a gtk_button_box instead of a toolbar for the realm buttons? (shouldn't have to wrap them then)

Default Parent GTD Nodes
o When creating new items (projects, areas, tasks) we have to select something as
the parent node.  For a task that's a project (and the default contexts need to be known
too).  Suggest using radio buttons (checkbuttons in the case of contexts) in the 
filter-view so we know what to use when creating new items with the action_rows.  For
Realms... perhaps they have three states: invisible, visible, and visible-default.  If
no default of any is selected, then the NonePath (or no contexts) should be used
o The Task and Proect Views should always display items from the NonePath, and perhaps
render them in such as way as to indicate to the user that they need to update them.

GTD Data Model
o task and project resource attachments (with twisty to hide)
o due date
o recurring tasks
o Create a base GTDAction class that all actions will derive from
  (only needed if we come up with more than NewX)

Signals and Slots Scope
o right now the scope is at the GTD tree level, rather than at the individual items.
  There are situations where it might make sense to have the individual widgets listen
  to the individual tree elements (like the context check boxes listening for a context
  rename event, while the context_table needs to listen for Added and Removed contexts)
o need to connect all the *removed signals
o work to base all gui updates from updates to the data models.  ie. we shouldn't have to 
  explicitly connect the conext_rename to the context_table.... right?

Backing Store
o consider usin ics files, especially if that would aid integration into things like the
  gnome clock/calendar panel applet (today's tasks in the applet, etc.)


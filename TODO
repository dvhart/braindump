Version 1.0 Tasks
=================
o Recursive delete option
  - recurse=false is used by default now and delete is disabled for the
    objects with paren't in the None Path
  - need a dialog to confirm recursive delete (may be a new menu item so
    "delete" never needs a dialog)
o Rethink the NonePath...
o Determine how to deal with "Waiting" tasks, perhaps a delegated field?
  - add gtd.owners and an owner field to task and project objects
  - add an owners filter in the stacked filter
o redesign the broken-ass gtd-popup-menu for right-button-press on all the tree
  views...
o when changing the filtered list of tasks or projects, if the previously
  selected gtd object is still visible, it should be selected.
o add a "[ ] include details" checkbox for the searches
o Need a profesisonal icon
o Debian/Ubuntu packaging
o RedHat/Suse packaging
o utilize status bar...
o option to purge completed items
o due date selection in gtd list
o basic markup in details.notes display
o basic help documentation
o Code refactoring
o Code pydoc
o eliminate all warnings and assertion errors
o add appropriate log level messages
o use countdown time to slowly remove items that newly become invisible
  due to changed dates, title, contexts, or other filterable property
o multiple select
  o popup menu for mark complete, date shifting
o Display Areas in a realm->area hierarchy in the details area combo box
o New Task Defaults is visible when projects are selected, need to rework
  like the Details form to show the appropriate fields based on work with
  mode
  - consider use the realms toolbar and filters to set default selections for
    new items
o don't use model[iter][0] syntax, seems to lead to segfaults...
o consider using the the filters to display current task/project details
  and reduce the details form to just the notes filed...
o update all headers to match date_select.py
o add on_key_press handler to date_select.py
o add monitor edge awareness to date_select.py
  - see kiwi dateentry.py
  - /usr/share/python-support/python-kiwi/kiwi/ui/dateentry.py
o Abide by "show completed" settings in filter lists as well

Save Settings / State (GCONF, GNOME dep?)
---------------------------
o window size and position
o details visibility
o last file loaded
o last view state ?
o visible realms
o active filters


Version 2.0+ Tasks
==================
o have the filter row animate (swell, glow, whatever) when something is
  added/removed
o task and project resource attachments (with twisty to hide)
o recurring tasks
o create plugin mechanism
o MetaFilters - allow the creation of project and task filters by the user
  using boolean logic: "Calls and Morning", "Evening or Weekend"
o consider making rename less easy - can be done on accident
o nag mail for delegated tasks
o export to html
o report generation (monthly reports, burn-down, etc.)
o consider multiple notes per task/project, automatically dated, removed with a
  single click on an [x]...
o consider using a dict of fields.  This would make writing plugins easier,
  and the backing stores simpler.
  - could also just use the method described here: 
    http://www.python.org/doc/2.2/ref/attribute-access.html
o grouped-by (date, project, context, area)
o click on task to launch common tools (email, sip phone, browser, etc.)
o multiple select (v2?)
  o popup menu for mark complete, date shifting
o look at making the gtd objects have a parent which can be anything above them
  in the hierarchy.  This would allow for setting a task to be in an area or
  realm, without needing to create a project, which seems to be a very common 
  use case.

Other
=====
o look at adding braindump to http://pypi.python.org/pypi ?? timrc's suggestion
o decide on consistent coding style
  o widget naming: update, update_btn, etc.
o gut requirements on GNOME, and try to be a pure gtk app by default
  - plugins can have GNOME dependencies
o tickler integration to calendars plus internal notification
o resource tab (basically embedding zim-like functionality)

Someday / Maybe
===============
o GWT (Java) for offline web app interface (google gears)
